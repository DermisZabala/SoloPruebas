"""
Django settings for mi_cuevana project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Cargar variables de entorno desde el archivo .env (para desarrollo local)
# Asegúrate de haber instalado 'python-dotenv' con: pip install python-dotenv
load_dotenv(os.path.join(BASE_DIR, '.env'))


# --- CONFIGURACIÓN DE SEGURIDAD PARA PRODUCCIÓN Y DESARROLLO ---

# SECRET_KEY: Intenta leer la clave desde la variable de entorno 'DJANGO_SECRET_KEY'.
# Si no la encuentra, genera una nueva clave aleatoria (esto solo debe ocurrir en desarrollo).
# ¡NUNCA expongas la SECRET_KEY de producción!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', get_random_secret_key())

# DEBUG: Lee la variable de entorno 'DEBUG'. Si es exactamente 'True', se activa el modo debug.
# Por defecto y por seguridad, DEBUG es False.
DEBUG = os.environ.get('DEBUG') == 'True'

# ALLOWED_HOSTS: Se configura a partir de una variable de entorno.
# En producción (Vercel), debes definir 'DJANGO_ALLOWED_HOSTS'.
# Para desarrollo local, si la variable no existe, usamos valores por defecto.
ALLOWED_HOSTS = []
if os.environ.get('DJANGO_ALLOWED_HOSTS'):
    ALLOWED_HOSTS.extend(os.environ.get('DJANGO_ALLOWED_HOSTS').split(','))
else:
    # Valores por defecto para desarrollo local si no se define la variable
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

# Vercel añade su propio dominio automáticamente a una variable de entorno.
# Esta lógica lo añade a ALLOWED_HOSTS para que no tengas que hacerlo a mano.
VERCEL_URL = os.environ.get('VERCEL_URL')
if VERCEL_URL:
    ALLOWED_HOSTS.append(f'.{VERCEL_URL}')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mi_cuevana.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mi_cuevana.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-es'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Configuración para que WhiteNoise encuentre los archivos estáticos en producción
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_build')

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- CONFIGURACIÓN PERSONALIZADA DEL PROYECTO ---

# Esta variable parece ser usada por tus scripts locales de gestión.
# Se deja aquí para compatibilidad, pero recuerda que es una ruta fija a tu PC.
LOCAL_DATA_PATH = Path("C:/mi-json/data.json")

# URLs de los archivos JSON en GitHub que usa el data_manager
GITHUB_RAW_URLS = {
    'raw1': "https://raw.githubusercontent.com/DermisZabala/data1/refs/heads/master/data1.json",
    'raw2': "https://raw.githubusercontent.com/DermisZabala/data2/refs/heads/master/data2.json",
    'raw3': "https://raw.githubusercontent.com/DermisZabala/data3/refs/heads/master/data3.json",
}